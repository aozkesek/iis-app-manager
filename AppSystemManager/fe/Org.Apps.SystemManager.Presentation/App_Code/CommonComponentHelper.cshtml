@using Org.Apps.SystemManager.Presentation.Base;
@using Org.Apps.SystemManager.Presentation.Models;
@using Org.Apps.SystemManager.Presentation.Helpers;

@using System.Web.Mvc;

@helper ValidationErrorSummary(System.Web.Mvc.ModelStateDictionary modelStates) 
{
    var errors = modelStates != null ? modelStates[""] != null ? modelStates[""].Errors : null : null;

    if (errors != null && errors.Count > 0)
    {
        <ul class="validation-summary-errors">
            @foreach (ModelError me in errors)
            {
                <li>@me.ErrorMessage</li>
            }
        </ul>
    }
}

@helper FormValidate(string formName) {
    <script type="text/javascript"> $("#@formName").validate();</script>
}

@helper GenericInputBox(System.Web.Mvc.ModelStateDictionary modelStates, string name, string label, string value="", int minLength=0, int maxLength=100, bool required=false, string type="text", string equalTo="")
{
    var errors = modelStates != null ? modelStates[name] != null ? modelStates[name].Errors : null : null;
    var errMsg = "";
    if (errors != null && errors.Count > 0)
    {
        foreach (ModelError me in errors)
        {
            errMsg += me.ErrorMessage + ".  ";
        }
    }
     
    <label for="@name">@label@if(required){<font color="red" font-weight="bold">*</font>}</label>
    <input id="@name" name="@name" type="@(type.Equals("password") ? type : "")" value="@value" 
           class="@(required?"required":"")" 
           oninput="$(this).valid()"/>
    if (!string.IsNullOrEmpty(errMsg))
    {
        <label class="error" for="@name">@errMsg</label>
    }

    <script type="text/javascript">
    var equalTo = '#@equalTo';
    $("#@name").rules("add", {
        minlength: @minLength,
        maxlength: @maxLength,
        required: @(required ? "true" : "false")
        @(type.Equals("email") ? ", email: true" : type.Equals("number") ? ", number: true" : type.Equals("date") ? ", dateISO: true" : "" )
        });
    if (equalTo.length > 1)
        $("#@name").rules("add", { equalTo: equalTo });
    </script>
    if (type.Equals("number"))
    {
    <script type="text/javascript">
        $("#@name").inputmask("9{@minLength,@maxLength}", { greedy: false, clearMaskOnLostFocus: true });
    </script>
    }
}

@helper UsernameBox(string userName, System.Web.Mvc.ModelStateDictionary modelStates)
{
    @GenericInputBox(modelStates, "UserName", Resources.Global.UserName, userName, 5, 12, true)
}

@helper FirstnameBox(string firstName, System.Web.Mvc.ModelStateDictionary modelStates)
{
    @GenericInputBox(modelStates, "FirstName", Resources.Global.Name, firstName, 1, 100, true)
}

@helper LastnameBox(string lastName, System.Web.Mvc.ModelStateDictionary modelStates)
{
    @GenericInputBox(modelStates, "LastName", Resources.Global.LastName, lastName, 1, 100, true)
}

@helper PasswordBox(string passWord, System.Web.Mvc.ModelStateDictionary modelStates)
{
    @GenericInputBox(modelStates, "Password", Resources.Global.Password, passWord, 6, 32, true, "password")
}

@helper EmailBox(string email, System.Web.Mvc.ModelStateDictionary modelStates)
{
    @GenericInputBox(modelStates, "Email", Resources.Global.Email, email, 3, 500, true, "email")
}

@helper AppsHostSitePoolApplication(string controller, MaintenanceOperation operation, Apps model = null)
{

    bool isNullModel = model == null || String.IsNullOrEmpty(model.ApplicationName);
    bool isBackup = operation == MaintenanceOperation.Backup;
    bool isDeploy = operation == MaintenanceOperation.Deploy;
    bool isUndeploy = operation == MaintenanceOperation.Undeploy;
    bool isRestore = operation == MaintenanceOperation.Restore;
    bool isUpgrade = operation == MaintenanceOperation.Upgrade;
    bool isPoolVisible = !isBackup && !isRestore && !isUpgrade && !isUndeploy;
    bool isApplicationVisible = !(isNullModel && (isBackup || isRestore || isUpgrade));

    <fieldset>
        <ol>
            @if (isDeploy)
            {
                <li>
                    <label>@Resources.Global.ZipFileSelect</label>
                    <input type="file" id="PackageZIP" name="PackageZIP" value="" accept=".zip" onchange="setApplicationName();" style="width:600px;">
                </li>
            }

            <li>
                <label for="HostName">@Resources.Global.HostName</label>
                @if (isNullModel)
                {
                    <select id="HostName" name="HostName" onchange="listSiteNPool();"></select>
                }
                else
                {
                    <input type="text" readonly id="HostName" name="HostName" value="@model.HostName"></input>
                }
                <span class="field-validation-valid" data-valmsg-for="HostName" data-valmsg-replace="true"></span>
            </li>

            <li>
                <label for="SiteName">@Resources.Global.SiteName</label>
                @if (isNullModel)
                {
                    <select id="SiteName" name="SiteName">
                        <option selected="selected" value="-">@Resources.Global.SelectItem</option>
                    </select>
                }
                else
                {
                    <input type="text" readonly id="SiteName" name="SiteName" value="@model.SiteName"></input>
                }
                <span class="field-validation-valid" data-valmsg-for="SiteName" data-valmsg-replace="true"></span>
            </li>

            @if (isPoolVisible)
            {
                <li>
                    <label for="ApplicationPoolName">@Resources.Global.ApplicationPoolName</label>
                    @if (isNullModel || isRestore)
                    {
                        <select id="ApplicationPoolName" name="ApplicationPoolName">
                            <option selected="selected" value="-">@Resources.Global.SelectItem</option>
                        </select>
                    }
                    else
                    {
                        <input type="text" readonly id="ApplicationPoolName" name="ApplicationPoolName" value="@model.ApplicationPoolName"></input>
                    }
                    <span class="field-validation-valid" data-valmsg-for="ApplicationPoolName" data-valmsg-replace="true"></span>
                </li>
            }

            @if (isApplicationVisible)
            {
                <li>
                    <label for="ApplicationName">@Resources.Global.ApplicationName</label>
                    <input id="ApplicationName" name="ApplicationName" readonly type="text" value="@(isNullModel ? "" : model.ApplicationName)">
                    <span class="field-validation-valid" data-valmsg-for="ApplicationName" data-valmsg-replace="true"></span>
                </li>

            }
        </ol>

    </fieldset>

    <script type="text/javascript">

    @if (isNullModel)
    {
        <text>
        $("#HostName").Apps_FillOption('@controller/ListHost', {});
        </text>
    }

    @if (isPoolVisible && isRestore)
    {
        <text>
        $("#ApplicationPoolName").Apps_FillOption('@controller/ListPool', { hostName: $("#HostName").val() });
        </text>
    }

    function setApplicationName() {
        var choosenFile = $("#PackageZIP").val();
        var fileParts = choosenFile.split("\\");

        console.log(choosenFile);

        if (fileParts.length > 0)
            choosenFile = fileParts[fileParts.length - 1];

        if (choosenFile.indexOf(".zip") > 0)
            choosenFile = choosenFile.replace(".zip", "");

        console.log(choosenFile);

        $("#ApplicationName").val(choosenFile);
    }

    function listSiteNPool() {
        $("#SiteName").Apps_FillOption('@controller/ListSite', { hostName: $("#HostName").val() });
        $("#ApplicationPoolName").Apps_FillOption('@controller/ListPool', { hostName: $("#HostName").val() });
        return false;
    }

    </script>

} 